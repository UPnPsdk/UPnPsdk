name: Integration tests

on:
  push:
    branches: [ dev, main ]
  pull_request:
    branches: [ dev, main ]

jobs:
  # Job: Check clang format
  # -----------------------
  clang:
    if: true
    name: Check clang format
    runs-on: ubuntu-24.04
    steps:
    - uses: actions/checkout@v4
    - uses: jidicula/clang-format-action@v4.11.0
      with:
        clang-format-version: '17'


  # Job: Configure, build and test Ubuntu
  # -------------------------------------
  Build_Ubuntu:
    if: true
    name: Test Ubuntu
    needs: [ clang ]
    runs-on: ubuntu-24.04

    strategy:
      matrix:
        buildtype: [ 'Release', 'Debug' ]
        googletest: [ '-D UPnPsdk_WITH_GOOGLETEST=ON -D UPnPsdk_WITH_OPENSSL=OFF',
                      '-D UPnPsdk_WITH_GOOGLETEST=ON -D UPnPsdk_WITH_OPENSSL=ON' ]
      fail-fast: false

    steps:
    # Step building upnplib
      - uses: actions/checkout@v4

      - name: Configure
        run: >
          cmake
          -S .
          -B build
          -D CMAKE_C_COMPILER=gcc-14
          -D CMAKE_CXX_COMPILER=g++-14
          -D CMAKE_BUILD_TYPE=${{matrix.buildtype}}
          ${{matrix.googletest}}

      - name: Build
        run: cmake --build build/

      - name: Install
        run: sudo cmake --install build/

      # I do not use static Googletest libraries by default.
      #- if: (matrix.googletest == '-D UPnPsdk_WITH_GOOGLETEST=ON -D UPnPsdk_WITH_OPENSSL=OFF')
      #  name: Check gtest library files, static
      #  run: |
      #    ls ./build/lib/libgtest.a
      #    ls ./build/lib/libgmock.a
      #    ls ./build/lib/libgtest_main.a
      #    ls ./build/lib/libgmock_main.a

      - if: (matrix.googletest == '-D UPnPsdk_WITH_GOOGLETEST=ON -D UPnPsdk_WITH_OPENSSL=ON')
        name: Check gtest library files, shared
        run: |
          ls ./build/lib/libgtest.so
          ls ./build/lib/libgmock.so
          ls ./build/lib/libgtest_main.so
          ls ./build/lib/libgmock_main.so

      - if: matrix.buildtype != 'Debug'
        name: Verify if NO Debug info
        run: |
          objdump -g /usr/local/lib/libupnpsdk-compa.so | grep --ignore-case --max-count=1 --invert-match "Contents of the .debug_info section"
          objdump -g /usr/local/lib/libupnpsdk-pupnp.so | grep --ignore-case --max-count=1 --invert-match "Contents of the .debug_info section"
          objdump -g /usr/local/lib/libupnpsdk.so | grep --ignore-case --max-count=1 --invert-match "Contents of the .debug_info section"
          ls /usr/local/lib/libixml.a
          ls /usr/local/lib/libupnpsdk-compa.a
          ls /usr/local/lib/libupnpsdk-pupnp.a
          ls /usr/local/lib/libupnpsdk.a

      - if: matrix.buildtype == 'Debug'
        name: Verify if Debug info
        run: |
          objdump -g /usr/local/lib/libupnpsdk-compa.so | grep --ignore-case --max-count=1 "Contents of the .debug_info section"
          objdump -g /usr/local/lib/libupnpsdk-pupnp.so | grep --ignore-case --max-count=1 "Contents of the .debug_info section"
          objdump -g /usr/local/lib/libupnpsdk.so | grep --ignore-case --max-count=1 "Contents of the .debug_info section"
          ls /usr/local/lib/libixml.a
          ls /usr/local/lib/libupnpsdk-compa.a
          ls /usr/local/lib/libupnpsdk-pupnp.a
          ls /usr/local/lib/libupnpsdk.a

     #- name: Run upnplib info programs
     #  # This program is always built
     #  run: ./build/bin/upnplib-pst; ./build/bin/upnplib-psh; ./build/bin/upnplib-cst; ./build/bin/upnplib-csh

      - name: Run gtests
        run: |
          cd ./build/Utest
          ctest --timeout 6 --output-on-failure

      - name: Run gtests with debug output
        run: |
          cd ./build/Utest
          UPnPsdk_DEBUG=true ctest --timeout 6 --output-on-failure


  # Job: Configure, build and test MacOS
  #-------------------------------------
  Build_MacOS:
    if: true
    name: Test MacOS
    needs: [ clang ]
    runs-on: macos-13

    strategy:
      matrix:
        buildtype: [ 'Release', 'Debug' ]
        googletest: [ '-D UPnPsdk_WITH_GOOGLETEST=ON -D UPnPsdk_WITH_OPENSSL=ON',
                      '-D UPnPsdk_WITH_GOOGLETEST=ON -D UPnPsdk_WITH_OPENSSL=OFF' ]
      fail-fast: false

    steps:
    # Steps to build and test upnplib
      - uses: actions/checkout@v4

      - name: Configure
        run: >
          cmake
          -S .
          -B build
          -D CMAKE_BUILD_TYPE=${{matrix.buildtype}}
          ${{matrix.googletest}}

      - name: Build
        run: cmake --build build/

      - name: Install
        run: sudo cmake --install build/

      # I do not use static Googletest libraries by default.
      #- if: (matrix.googletest == '-D UPnPsdk_WITH_GOOGLETEST=ON -D UPnPsdk_WITH_OPENSSL=OFF')
      #  name: Check gtest library files, static
      #  run: |
      #    ls ./build/lib/libgtest.a
      #    ls ./build/lib/libgmock.a
      #    ls ./build/lib/libgtest_main.a
      #    ls ./build/lib/libgmock_main.a

      - if: (matrix.googletest == '-D UPnPsdk_WITH_GOOGLETEST=ON -D UPnPsdk_WITH_OPENSSL=ON')
        name: Check gtest library files, shared
        run: |
          ls ./build/lib/libgtest.dylib
          ls ./build/lib/libgmock.dylib
          ls ./build/lib/libgtest_main.dylib
          ls ./build/lib/libgmock_main.dylib

      - name: Verify if libraries available
        run: |
          ls /usr/local/lib/libupnpsdk-compa.dylib
          ls /usr/local/lib/libupnpsdk-pupnp.dylib
          ls /usr/local/lib/libupnpsdk.dylib
          ls /usr/local/lib/libixml.a
          ls /usr/local/lib/libupnpsdk-compa.a
          ls /usr/local/lib/libupnpsdk-pupnp.a
          ls /usr/local/lib/libupnpsdk.a

     #- name: Run upnplib info programs
     #  # This program is always built
     #  run: ./build/bin/upnplib-pst; ./build/bin/upnplib-psh; ./build/bin/upnplib-cst; ./build/bin/upnplib-csh

      - name: Run gtests
        run: |
          cd ./build/Utest
          ctest --timeout 6 --output-on-failure

      - name: Run gtests with debug output
        run: |
          cd ./build/Utest
          UPnPsdk_DEBUG=true ctest --timeout 6 --output-on-failure

  # Job: Configure, build and test with Visual Studio
  #--------------------------------------------------
  Build_with_Visual_Studio:
    if: true
    name: Test w/ VS
    needs: [ clang ]
    runs-on: ${{ matrix.os }}

    strategy:
      matrix:
        buildtype: [ 'Release', 'Debug' ]
        os: [ windows-2019, windows-2022 ]
        googletest: [ '-D UPnPsdk_WITH_GOOGLETEST=ON -D UPnPsdk_WITH_OPENSSL=ON',
                      '-D UPnPsdk_WITH_GOOGLETEST=ON -D UPnPsdk_WITH_OPENSSL=OFF' ]
      fail-fast: false

    steps:
    # Step building upnplib
      - uses: actions/checkout@v4

      - if: matrix.os == 'windows-2019'
        # need developer command prompt
        name: Use MS Windows 32 bit
        uses: ilammy/msvc-dev-cmd@v1
        with:
          arch: win32

      - if: matrix.os == 'windows-2022'
        # need developer command prompt
        name: Use MS Windows 64 bit
        uses: ilammy/msvc-dev-cmd@v1
        with:
          arch: amd64

      - if: matrix.os == 'windows-2019'
        name: Configure 32 bit
        run: >
          cmake
          -S .
          -B build
          -A Win32
          ${{matrix.googletest}}
          -D CMAKE_BUILD_TYPE=${{matrix.buildtype}}
          -D UPnPsdk_WITH_OPENSSL=OFF
          # We do not have a 32 bit OpenSSL library available.

      - if: matrix.os == 'windows-2022'
        name: Configure 64 bit
        run: >
          cmake
          -S .
          -B build
          -A x64
          ${{matrix.googletest}}
          -D CMAKE_BUILD_TYPE=${{matrix.buildtype}}

      - name: Build
        run: cmake --build build --config ${{matrix.buildtype}}

      - if: (matrix.googletest == '-D UPnPsdk_WITH_GOOGLETEST=ON -D UPnPsdk_WITH_OPENSSL=OFF')
        name: GTest link libraries build with Visual Studio
        run: |
          ls ./build/lib/${{matrix.buildtype}}/gtest.lib
          ls ./build/lib/${{matrix.buildtype}}/gmock.lib
          ls ./build/lib/${{matrix.buildtype}}/gtest_main.lib
          ls ./build/lib/${{matrix.buildtype}}/gmock_main.lib

      - if: (matrix.googletest == '-D UPnPsdk_WITH_GOOGLETEST=ON -D UPnPsdk_WITH_OPENSSL=ON')
        name: GTest .dll libraries build with Visual Studio
        run: |
          ls ./build/bin/${{matrix.buildtype}}/gtest.dll
          ls ./build/bin/${{matrix.buildtype}}/gmock.dll
          ls ./build/bin/${{matrix.buildtype}}/gtest_main.dll
          ls ./build/bin/${{matrix.buildtype}}/gmock_main.dll
          ls $env:SYSTEMROOT/System32/gtest.dll
          ls $env:SYSTEMROOT/System32/gmock.dll
          ls $env:SYSTEMROOT/System32/gtest_main.dll
          ls $env:SYSTEMROOT/System32/gmock_main.dll

     #- name: Run upnplib info programs
     #  run: ./build/bin/${{matrix.buildtype}}/upnplib-pst.exe; ./build/bin/${{matrix.buildtype}}/upnplib-psh.exe; ./build/bin/${{matrix.buildtype}}/upnplib-cst.exe; ./build/bin/${{matrix.buildtype}}/upnplib-csh.exe

      - name: Run gtests
        run: |
          $env:path += ";./build/bin/${{matrix.buildtype}}"
          cd ./build/Utest
          ctest -C ${{matrix.buildtype}} --timeout 9 --output-on-failure

      - name: Run gtests with debug output
        run: |
          $env:UPnPsdk_DEBUG = "set"
          cd ./build/Utest
          ctest -C ${{matrix.buildtype}} --timeout 9 --output-on-failure


  # Job: Configure, build and test with NMake
  #------------------------------------------
  Build_with_NMake:
    if: false
    name: Test w/ NMake
    needs: [ Build_Ubuntu, Build_MacOS ]
    runs-on: ${{ matrix.os }}

    strategy:
      matrix:
        buildtype: [ 'Release', 'Debug' ]
        os: [ windows-2019, windows-2022 ]
        googletest: [ '-D UPnPsdk_WITH_GOOGLETEST=ON -D UPnPsdk_WITH_OPENSSL=ON',
                      '-D UPnPsdk_WITH_GOOGLETEST=ON -D UPnPsdk_WITH_OPENSSL=OFF' ]
      fail-fast: false

    steps:
    # Step building upnplib
      - uses: actions/checkout@v4

      - if: matrix.os == 'windows-2019'
        # need developer command prompt
        name: Use MS Windows 32 bit
        uses: ilammy/msvc-dev-cmd@v1
        with:
          arch: win32

      - if: matrix.os == 'windows-2022'
        # need developer command prompt
        name: Use MS Windows 64 bit
        uses: ilammy/msvc-dev-cmd@v1
        with:
          arch: amd64

      - if: matrix.os == 'windows-2019'
        name: Configure 32 bit
        run: >
          cmake
          -S .
          -B build
          -G "NMake Makefiles" ${{matrix.googletest}}
          -D CMAKE_BUILD_TYPE=${{matrix.buildtype}}
          -D UPnPsdk_WITH_OPENSSL=OFF
          # We do not have a 32 bit OpenSSL library available.

      - if: matrix.os == 'windows-2022'
        name: Configure 64 bit
        run: >
          cmake
          -S .
          -B build
          -G "NMake Makefiles" ${{matrix.googletest}}
          -D CMAKE_BUILD_TYPE=${{matrix.buildtype}}
          -D CMAKE_GENERATOR_PLATFORM=x64
          # I cannot use option '-A x64' bcause NMake does not support it

      - name: Build
        run: cmake --build build --config ${{matrix.buildtype}}

      - if: (matrix.googletest == '-D UPnPsdk_WITH_GOOGLETEST=ON -D UPnPsdk_WITH_OPENSSL=OFF')
        name: GTest link libraries build with NMake
        run: |
          ls ./build/lib/gtest.lib
          ls ./build/lib/gmock.lib
          ls ./build/lib/gtest_main.lib
          ls ./build/lib/gmock_main.lib

      - if: (matrix.googletest == '-D UPnPsdk_WITH_GOOGLETEST=ON -D UPnPsdk_WITH_OPENSSL=ON')
        name: GTest .dll libraries build with NMake
        run: |
          ls ./build/bin/gtest.dll
          ls ./build/bin/gmock.dll
          ls ./build/bin/gtest_main.dll
          ls ./build/bin/gmock_main.dll
          ls $env:SYSTEMROOT/System32/gtest.dll
          ls $env:SYSTEMROOT/System32/gmock.dll
          ls $env:SYSTEMROOT/System32/gtest_main.dll
          ls $env:SYSTEMROOT/System32/gmock_main.dll

     #- name: Run upnplib info programs
     #  run: ./build/bin/upnplib-pst.exe; ./build/bin/upnplib-psh.exe; ./build/bin/upnplib-cst.exe; ./build/bin/upnplib-csh.exe

      - name: Run gtests
        run: |
          $env:path += ";./build/bin"
          cd ./build/Utest
          ctest -C ${{matrix.buildtype}} --timeout 9 --output-on-failure

      - name: Run gtests with debug output
        run: |
          $env:UPnPsdk_DEBUG = "set"
          cd ./build/Utest
          ctest -C ${{matrix.buildtype}} --timeout 9 --output-on-failure


  # Job: Run build tests
  # --------------------
  build_tests:
    if: true
    name: "build tests"
    #needs: [ Build_with_Visual_Studio, Build_with_NMake ]
    needs: [ Build_Ubuntu, Build_MacOS, Build_with_Visual_Studio ]
    runs-on: ${{ matrix.os }}

    strategy:
      matrix:
        os: [ ubuntu-24.04, macos-13, windows-latest ]
        buildtype: [ 'Debug' ]
        option: [ '',
          '-DUPnPsdk_WITH_OPENSSL=OFF -DUPnPsdk_WITH_MINISERVER=OFF -DUPnPsdk_WITH_WEBSERVER=OFF -DUPnPsdk_WITH_CTRLPT_SSDP=OFF -DUPnPsdk_WITH_DEVICE_SSDP=OFF -DUPnPsdk_WITH_OPTION_SSDP=OFF -DUPnPsdk_WITH_CTRLPT_DESCRIPTION=OFF -DUPnPsdk_WITH_DEVICE_DESCRIPTION=OFF -DUPnPsdk_WITH_CTRLPT_SOAP=OFF -DUPnPsdk_WITH_DEVICE_SOAP=OFF -DUPnPsdk_WITH_CTRLPT_GENA=OFF -DUPnPsdk_WITH_DEVICE_GENA=OFF -DUPnPsdk_WITH_IXML=OFF -DUPnPsdk_WITH_TOOLS=OFF -DUPnPsdk_WITH_SAMPLES=OFF -DUPnPsdk_WITH_GOOGLETEST=OFF -DUPnPsdk_WITH_TRACE=OFF -DGTESTS_WITH_SHARED_LIBS=OFF',
          '-DUPnPsdk_WITH_OPENSSL=ON',
          '-DUPnPsdk_WITH_MINISERVER=ON',
          '-DUPnPsdk_WITH_WEBSERVER=ON',
          '-DUPnPsdk_WITH_CTRLPT_SSDP=ON',
          '-DUPnPsdk_WITH_DEVICE_SSDP=ON',
          '-DUPnPsdk_WITH_OPTION_SSDP=ON',
          '-DUPnPsdk_WITH_CTRLPT_DESCRIPTION=ON',
          '-DUPnPsdk_WITH_DEVICE_DESCRIPTION=ON',
          '-DUPnPsdk_WITH_CTRLPT_SOAP=ON',
          '-DUPnPsdk_WITH_DEVICE_SOAP=ON',
          '-DUPnPsdk_WITH_CTRLPT_GENA=ON',
          '-DUPnPsdk_WITH_DEVICE_GENA=ON',
          '-DUPnPsdk_WITH_IXML=ON',
          '-DUPnPsdk_WITH_TOOLS=ON',
          '-DUPnPsdk_DEF_SAMPLES=ON -DUPnPsdk_DEF_DEVICE=ON',
          '-DUPnPsdk_DEF_SAMPLES=ON -DUPnPsdk_DEF_CLIENT=ON',
          '-DUPnPsdk_DEF_SAMPLES=ON -DUPnPsdk_DEF_COMBO=ON',
          '-DUPnPsdk_WITH_SAMPLES=ON',
          '-DUPnPsdk_WITH_TRACE=ON',
          '-DUPnPsdk_WITH_OPENSSL=ON -DUPnPsdk_WITH_MINISERVER=ON -DUPnPsdk_WITH_WEBSERVER=ON -DUPnPsdk_WITH_CTRLPT_SSDP=ON -DUPnPsdk_WITH_DEVICE_SSDP=ON -DUPnPsdk_WITH_OPTION_SSDP=ON -DUPnPsdk_WITH_CTRLPT_DESCRIPTION=ON -DUPnPsdk_WITH_DEVICE_DESCRIPTION=ON -DUPnPsdk_WITH_CTRLPT_SOAP=ON -DUPnPsdk_WITH_DEVICE_SOAP=ON -DUPnPsdk_WITH_CTRLPT_GENA=ON -DUPnPsdk_WITH_DEVICE_GENA=ON -DUPnPsdk_WITH_IXML=ON -DUPnPsdk_WITH_TOOLS=ON -DUPnPsdk_WITH_SAMPLES=ON -DUPnPsdk_WITH_GOOGLETEST=ON -DUPnPsdk_WITH_TRACE=ON -DGTESTS_WITH_SHARED_LIBS=ON' ]
        build_old: [ '-DUPnPsdk_WITH_NATIVE_PUPNP=OFF', '-DUPnPsdk_WITH_NATIVE_PUPNP=ON' ]
      fail-fast: false

    steps:
      - uses: actions/checkout@v4

      - if: matrix.os == 'windows-latest'
        # need developer command prompt
        name: Use MS Windows 64 bit
        uses: ilammy/msvc-dev-cmd@v1
        with:
          arch: amd64

      - if: runner.os == 'Linux'
        name: Configure Linux
        run: >
          cmake
          -S .
          -B build
          -D CMAKE_C_COMPILER=gcc-14
          -D CMAKE_CXX_COMPILER=g++-14
          -D CMAKE_BUILD_TYPE=${{matrix.buildtype}}
          ${{matrix.build_old}}
          ${{matrix.option}}

      - if: runner.os == 'macOS'
        name: Configure macOS
        run: >
          cmake
          -S .
          -B build
          -D CMAKE_BUILD_TYPE=${{matrix.buildtype}}
          ${{matrix.build_old}}
          ${{matrix.option}}

      - if: runner.os == 'Windows'
        name: Configure Windows
        run: >
          cmake
          -S .
          -B build
          -A x64
          -D CMAKE_BUILD_TYPE=${{matrix.buildtype}}
          ${{matrix.build_old}}
          ${{matrix.option}}

      - if: runner.os != 'Windows'
        name: Build not Windows
        run: |
          set -ev
          cmake --build build/
          sudo cmake --install build/
          sudo cmake --install build/ --component Development
          if [ -x /usr/local/bin/api_calls-psh ]; then /usr/local/bin/api_calls-psh; else true; fi
          /usr/local/bin/api_calls-csh

      - if: runner.os == 'Windows'
        name: Build Windows
        run: |
          $ErrorActionPreference = 'Stop'
          $PSNativeCommandUseErrorActionPreference = $true
          Set-PSDebug -Trace 1
          cmake --build build/ --config ${{matrix.buildtype}}
          cmake --install build/ --config ${{matrix.buildtype}}
          cmake --install build/ --config ${{matrix.buildtype}} --component Development
          $env:prog_path = "C:/Program Files/UPnPsdk/bin/api_calls-psh.exe"
          If (Test-Path -Path $env:prog_path) {& $env:prog_path}
          "C:/Program Files/UPnPsdk/bin/api_calls-csh.exe"


  # Job: Run 32 bit build tests
  # ---------------------------
  # This tests to compile for 32 bit architectures on a 64 bit host does not run.
  # The 64 bit 'Linux' and 'macOS' runner does not provide 32 bit system
  # libraries. Even installing 'g++-multilib' for 32 bit system libraries on
  # 'Linux' does not help. The 'macOS' runner complains: "ld: symbol(s) not
  # found for architecture i386".
  # The 'Windows' runner compiles 'pthreads4w' to 64 bit but not as expected to
  # 32 bit. This conflicts to the 32 bit UPnPsdk libraries. ToDo: this may be
  # fixed.
  # But all tests are successful running on 32 bit hosts as tested before.
  build_32_bit_tests:
    if: false
    name: "32 bit build tests"
    #needs: [ Build_with_Visual_Studio, Build_with_NMake ]
    needs: [ Build_Ubuntu, Build_MacOS, Build_with_Visual_Studio ]
    runs-on: ${{ matrix.os }}

    strategy:
      matrix:
        os: [ ubuntu-24.04, macos-13, windows-latest ]
        buildtype: [ 'Debug' ]
        option: [ '-D UPnPsdk_WITH_NATIVE_PUPNP=ON -DUPnPsdk_WITH_OPENSSL=OFF -DUPnPsdk_WITH_MINISERVER=ON -DUPnPsdk_WITH_WEBSERVER=ON -DUPnPsdk_WITH_CTRLPT_SSDP=ON -DUPnPsdk_WITH_DEVICE_SSDP=ON -DUPnPsdk_WITH_OPTION_SSDP=ON -DUPnPsdk_WITH_CTRLPT_DESCRIPTION=ON -DUPnPsdk_WITH_DEVICE_DESCRIPTION=ON -DUPnPsdk_WITH_CTRLPT_SOAP=ON -DUPnPsdk_WITH_DEVICE_SOAP=ON -DUPnPsdk_WITH_CTRLPT_GENA=ON -DUPnPsdk_WITH_DEVICE_GENA=ON -DUPnPsdk_WITH_IXML=ON -DUPnPsdk_WITH_TOOLS=ON -DUPnPsdk_WITH_SAMPLES=ON -DUPnPsdk_WITH_GOOGLETEST=ON -DUPnPsdk_WITH_TRACE=ON -DGTESTS_WITH_SHARED_LIBS=ON' ]
      fail-fast: false
    steps:
      - uses: actions/checkout@v4

      - if: matrix.os == 'windows-latest'
        # need developer command prompt
        name: Use MS Windows 64 bit
        uses: ilammy/msvc-dev-cmd@v1
        with:
          arch: amd64

      - if: runner.os == 'Linux'
        name: Configure Linux
        run: |
          sudo apt install g++-multilib
          cmake -S . -B build -D CMAKE_C_COMPILER=gcc-14 -D CMAKE_CXX_COMPILER=g++-14 -D CMAKE_C_FLAGS=-m32 -D CMAKE_CXX_FLAGS=-m32 -D CMAKE_BUILD_TYPE=${{matrix.buildtype}} ${{matrix.option}}

      - if: runner.os == 'macOS'
        name: Configure macOS
        run: >
          cmake
          -S .
          -B build
          -D CMAKE_C_FLAGS=-m32
          -D CMAKE_CXX_FLAGS=-m32
          -D CMAKE_BUILD_TYPE=${{matrix.buildtype}}
          ${{matrix.option}}

      - if: runner.os == 'Windows'
        name: Configure Windows
        run: >
          cmake
          -S .
          -B build
          -A Win32
          -D CMAKE_BUILD_TYPE=${{matrix.buildtype}}
          ${{matrix.option}}

      - if: runner.os != 'Windows'
        name: Build not Windows
        run: |
          set -ev
          cmake --build build/
          ls -la build/bin/
          if [ -x build/bin/api_calls-psh ]; then build/bin/api_calls-psh; else true; fi
          ./build/bin/api_calls-csh

      - if: runner.os == 'Windows'
        name: Build Windows
        run: |
          $ErrorActionPreference = 'Stop'
          $PSNativeCommandUseErrorActionPreference = $true
          Set-PSDebug -Trace 1
          cmake --build build --config ${{matrix.buildtype}}
          ls ./build/bin/${{matrix.buildtype}}
          $env:path += ";./build/bin/${{matrix.buildtype}}"
          $env:prog_path = "./build/bin/${{matrix.buildtype}}/api_calls-psh.exe"
          If (Test-Path -Path $env:prog_path) {& $env:prog_path}
          ./build/bin/${{matrix.buildtype}}/api_calls-csh.exe
