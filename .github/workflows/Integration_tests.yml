name: Integration tests

on:
  push:
    branches: [ dev, main, workflow_dispatch ]
  pull_request:
    branches: [ dev, main, workflow_dispatch ]

jobs:
  # Job: Configure, build and test Ubuntu
  #--------------------------------------
  # ubuntu-18.04 isn't used for tests because it doesn't support open standard
  # ISO C++20 that we declared to use for UPnPlib.
  Build_Ubuntu:
    name: Test Ubuntu
    runs-on: ubuntu-latest

    strategy:
      matrix:
        buildtype: [ 'Release', 'Debug' ]
        googletest: [ '-D UPNPLIB_WITH_GOOGLETEST=ON', '-D UPNPLIB_WITH_GOOGLETEST=ON -D GTESTS_WITH_SHARED_LIBS=ON' ]
      fail-fast: false

    steps:
    # Step building upnplib
      - uses: actions/checkout@v2

      - name: Configure
        run: >
          cmake
          -S .
          -B build
          -D CMAKE_C_COMPILER=gcc-10
          -D CMAKE_CXX_COMPILER=g++-10 ${{matrix.googletest}}
          -D CMAKE_BUILD_TYPE=${{matrix.buildtype}}

      - name: Build
        run: cmake --build build --config ${{matrix.buildtype}}

      - if: (matrix.googletest == '-D UPNPLIB_WITH_GOOGLETEST=ON')
        name: Check gtest library files, static
        run: |
          ls ./build/lib/libgtest.a
          ls ./build/lib/libgmock.a
          ls ./build/lib/libgtest_main.a
          ls ./build/lib/libgmock_main.a

      - if: (matrix.googletest == '-D UPNPLIB_WITH_GOOGLETEST=ON -D GTESTS_WITH_SHARED_LIBS=ON')
        name: Check gtest library files, shared
        run: |
          ls ./build/lib/libgtest.so
          ls ./build/lib/libgmock.so
          ls ./build/lib/libgtest_main.so
          ls ./build/lib/libgmock_main.so

      - if: matrix.buildtype != 'Debug'
        name: Verify if NO Debug info
        # These two libraries are always built
        run: |
          objdump -g ./build/lib/libpupnp_shared.so | grep --ignore-case --max-count=1 --invert-match "Contents of the .debug_info section"
          objdump -g ./build/lib/libcompa_shared.so | grep --ignore-case --max-count=1 --invert-match "Contents of the .debug_info section"
          objdump -g ./build/lib/libupnplib_shared.so | grep --ignore-case --max-count=1 --invert-match "Contents of the .debug_info section"
          ls ./build/lib/libpupnp_static.a
          ls ./build/lib/libcompa_static.a
          ls ./build/lib/libupnplib_static.a

      - if: matrix.buildtype == 'Debug'
        name: Verify if Debug info
        # These two libraries are always built
        run: |
          objdump -g ./build/lib/libpupnp_shared.so | grep --ignore-case --max-count=1 "Contents of the .debug_info section"
          objdump -g ./build/lib/libcompa_shared.so | grep --ignore-case --max-count=1 "Contents of the .debug_info section"
          objdump -g ./build/lib/libupnplib_shared.so | grep --ignore-case --max-count=1 "Contents of the .debug_info section"
          ls ./build/lib/libpupnp_static.a
          ls ./build/lib/libcompa_static.a
          ls ./build/lib/libupnplib_static.a

      - name: Run upnplib info programs
        # This program is always built
        run: ./build/bin/upnplib-pst; ./build/bin/upnplib-psh; ./build/bin/upnplib-cst; ./build/bin/upnplib-csh

      - name: Run gtests
        run: |
          cd ./build/gtests
          ctest --timeout 4 --output-on-failure


  # Job: Configure, build and test MacOS
  #-------------------------------------
  Build_MacOS:
    name: Test MacOS
    runs-on: macOS-latest

    strategy:
      matrix:
        buildtype: [ 'Release', 'Debug' ]
        googletest: [ '-D UPNPLIB_WITH_GOOGLETEST=ON', '-D UPNPLIB_WITH_GOOGLETEST=ON -D GTESTS_WITH_SHARED_LIBS=ON' ]
      fail-fast: false

    steps:
    # Steps to build and test upnplib
      - uses: actions/checkout@v2

      - name: Configure
        run: >
          cmake
          -S .
          -B build ${{matrix.googletest}}
          -D CMAKE_BUILD_TYPE=${{matrix.buildtype}}

      - name: Build
        run: cmake --build build --config ${{matrix.buildtype}}

      - if: (matrix.googletest == '-D UPNPLIB_WITH_GOOGLETEST=ON')
        name: Check gtest library files, static
        run: |
          ls ./build/lib/libgtest.a
          ls ./build/lib/libgmock.a
          ls ./build/lib/libgtest_main.a
          ls ./build/lib/libgmock_main.a

      - if: (matrix.googletest == '-D UPNPLIB_WITH_GOOGLETEST=ON -D GTESTS_WITH_SHARED_LIBS=ON')
        name: Check gtest library files, shared
        run: |
          ls ./build/lib/libgtest.dylib
          ls ./build/lib/libgmock.dylib
          ls ./build/lib/libgtest_main.dylib
          ls ./build/lib/libgmock_main.dylib

      - if: matrix.buildtype != 'Debug'
        name: Verify if NO Debug info
        # These two libraries are always built
        run: |
          ls ./build/lib/libpupnp_shared.dylib
          ls ./build/lib/libcompa_shared.dylib
          ls ./build/lib/libupnplib_shared.dylib
          ls ./build/lib/libpupnp_static.a
          ls ./build/lib/libcompa_static.a
          ls ./build/lib/libupnplib_static.a

      - if: matrix.buildtype == 'Debug'
        name: Verify if Debug info
        # These two libraries are always built
        run: |
          ls ./build/lib/libpupnp_shared.dylib
          ls ./build/lib/libcompa_shared.dylib
          ls ./build/lib/libupnplib_shared.dylib
          ls ./build/lib/libpupnp_static.a
          ls ./build/lib/libcompa_static.a
          ls ./build/lib/libupnplib_static.a

      - name: Run upnplib info programs
        # This program is always built
        run: ./build/bin/upnplib-pst; ./build/bin/upnplib-psh; ./build/bin/upnplib-cst; ./build/bin/upnplib-csh

      - name: Run gtests
        run: |
          cd ./build/gtests
          ctest --timeout 5 --output-on-failure


  # Job: Configure, build and test with Visual Studio
  #--------------------------------------------------
  Build_with_Visual_Studio:
    name: Test w/ VS
    runs-on: ${{ matrix.os }}

    strategy:
      matrix:
        buildtype: [ 'Release', 'Debug' ]
        os: [ windows-2019, windows-2022 ]
        googletest: [ '-D UPNPLIB_WITH_GOOGLETEST=ON', '-D UPNPLIB_WITH_GOOGLETEST=ON -D GTESTS_WITH_SHARED_LIBS=ON' ]
      fail-fast: false

    steps:
    # Step building upnplib
      - uses: actions/checkout@v2

      - if: matrix.os == 'windows-2019'
        # need developer command prompt
        name: Use MS Windows 32 bit
        uses: ilammy/msvc-dev-cmd@v1
        with:
          arch: win32

      - if: matrix.os == 'windows-2022'
        # need developer command prompt
        name: Use MS Windows 64 bit
        uses: ilammy/msvc-dev-cmd@v1
        with:
          arch: amd64

      - if: matrix.os == 'windows-2019'
        name: Configure 32 bit
        run: >
          cmake
          -S .
          -B build
          -A Win32 ${{matrix.googletest}}
          -D CMAKE_BUILD_TYPE=${{matrix.buildtype}}

      - if: matrix.os == 'windows-2022'
        name: Configure 64 bit
        run: >
          cmake
          -S .
          -B build ${{matrix.googletest}}
          -D CMAKE_BUILD_TYPE=${{matrix.buildtype}}

      - name: Build
        run: cmake --build build --config ${{matrix.buildtype}}

      - if: (matrix.googletest == '-D UPNPLIB_WITH_GOOGLETEST=ON')
        name: GTest link libraries build with Visual Studio
        run: |
          ls ./build/lib/${{matrix.buildtype}}/gtest.lib
          ls ./build/lib/${{matrix.buildtype}}/gmock.lib
          ls ./build/lib/${{matrix.buildtype}}/gtest_main.lib
          ls ./build/lib/${{matrix.buildtype}}/gmock_main.lib

      - if: (matrix.googletest == '-D UPNPLIB_WITH_GOOGLETEST=ON -D GTESTS_WITH_SHARED_LIBS=ON')
        name: GTest .dll libraries build with Visual Studio
        run: |
          ls ./build/bin/${{matrix.buildtype}}/gtest.dll
          ls ./build/bin/${{matrix.buildtype}}/gmock.dll
          ls ./build/bin/${{matrix.buildtype}}/gtest_main.dll
          ls ./build/bin/${{matrix.buildtype}}/gmock_main.dll
          ls $env:SYSTEMROOT/System32/gtest.dll
          ls $env:SYSTEMROOT/System32/gmock.dll
          ls $env:SYSTEMROOT/System32/gtest_main.dll
          ls $env:SYSTEMROOT/System32/gmock_main.dll

      - name: Run upnplib info programs
        run: ./build/bin/${{matrix.buildtype}}/upnplib-pst.exe; ./build/bin/${{matrix.buildtype}}/upnplib-psh.exe; ./build/bin/${{matrix.buildtype}}/upnplib-cst.exe; ./build/bin/${{matrix.buildtype}}/upnplib-csh.exe

      - if: (matrix.os != 'windows-2019') || (matrix.googletest != '-D UPNPLIB_WITH_GOOGLETEST=ON -D GTESTS_WITH_SHARED_LIBS=ON')
        # Running static compiled tests with compiled GTESTS_WITH_SHARED_LIBS=ON
        # we have a problem. The static compiled tests crash with Exit code
        # 0xc0000135. This is only with windows-2019. Maybe the gtest/gmock
        # libraries does not compile to 32 bit code and I have to do additional
        # configuration? On all other platforms all tests run successful. --Ingo
        name: Run gtests
        run: |
          $env:path += ";./build/bin/${{matrix.buildtype}}"
          cd ./build/gtests
          ctest -C ${{matrix.buildtype}} --timeout 2 --output-on-failure


  # Job: Configure, build and test with NMake
  #------------------------------------------
  Build_with_NMake:
    name: Test w/ NMake
    needs: [ Build_Ubuntu, Build_MacOS ]
    runs-on: ${{ matrix.os }}

    strategy:
      matrix:
        buildtype: [ 'Release', 'Debug' ]
        os: [ windows-2019, windows-2022 ]
        googletest: [ '-D UPNPLIB_WITH_GOOGLETEST=ON', '-D UPNPLIB_WITH_GOOGLETEST=ON -D GTESTS_WITH_SHARED_LIBS=ON' ]
      fail-fast: false

    steps:
    # Step building upnplib
      - uses: actions/checkout@v2

      - if: matrix.os == 'windows-2019'
        # need developer command prompt
        name: Use MS Windows 32 bit
        uses: ilammy/msvc-dev-cmd@v1
        with:
          arch: win32

      - if: matrix.os == 'windows-2022'
        # need developer command prompt
        name: Use MS Windows 64 bit
        uses: ilammy/msvc-dev-cmd@v1
        with:
          arch: amd64

      - name: Configure
        run: >
          cmake
          -S .
          -B build
          -G "NMake Makefiles" ${{matrix.googletest}}
          -D CMAKE_BUILD_TYPE=${{matrix.buildtype}}

      - name: Build
        run: cmake --build build --config ${{matrix.buildtype}}

      - if: (matrix.googletest == '-D UPNPLIB_WITH_GOOGLETEST=ON')
        name: GTest link libraries build with NMake
        run: |
          ls ./build/lib/gtest.lib
          ls ./build/lib/gmock.lib
          ls ./build/lib/gtest_main.lib
          ls ./build/lib/gmock_main.lib

      - if: (matrix.googletest == '-D UPNPLIB_WITH_GOOGLETEST=ON -D GTESTS_WITH_SHARED_LIBS=ON')
        name: GTest .dll libraries build with NMake
        run: |
          ls ./build/bin/gtest.dll
          ls ./build/bin/gmock.dll
          ls ./build/bin/gtest_main.dll
          ls ./build/bin/gmock_main.dll
          ls $env:SYSTEMROOT/System32/gtest.dll
          ls $env:SYSTEMROOT/System32/gmock.dll
          ls $env:SYSTEMROOT/System32/gtest_main.dll
          ls $env:SYSTEMROOT/System32/gmock_main.dll

      - name: Run upnplib info programs
        run: ./build/bin/upnplib-pst.exe; ./build/bin/upnplib-psh.exe; ./build/bin/upnplib-cst.exe; ./build/bin/upnplib-csh.exe

      - if: (matrix.os != 'windows-2019') || (matrix.googletest != '-D UPNPLIB_WITH_GOOGLETEST=ON -D GTESTS_WITH_SHARED_LIBS=ON')
        # Running static compiled tests with compiled GTESTS_WITH_SHARED_LIBS=ON
        # we have a problem. The static compiled tests crash with Exit code
        # 0xc0000135. This is only with windows-2019. Maybe the gtest/gmock
        # libraries does not compile to 32 bit code and I have to do additional
        # configuration? On all other platforms all tests run successful. --Ingo
        name: Run gtests
        run: |
          $env:path += ";./build/bin"
          cd ./build/gtests
          ctest -C ${{matrix.buildtype}} --timeout 3 --output-on-failure


  # Job: Run build tests
  # --------------------
  build_tests:
    name: "build tests"
    needs: [ Build_with_Visual_Studio, Build_with_NMake ]
    runs-on: ${{ matrix.os }}

    strategy:
      matrix:
        os: [ ubuntu-latest, macOS-latest, windows-latest ]
        buildtype: [ 'Release', 'Debug' ]
        option: [ '',
          '-DUPNPLIB_WITH_TOOLS=ON',
          '-DUPNPLIB_WITH_CLIENT=ON',
          '-DUPNPLIB_WITH_DEVICE=ON',
          '-DUPNPLIB_WITH_WEBSERVER=ON',
          '-DUPNPLIB_WITH_SSDP=ON',
          '-DUPNPLIB_WITH_OPTSSDP=ON',
          '-DUPNPLIB_WITH_SOAP=ON',
          '-DUPNPLIB_WITH_GENA=ON',
          '-DUPNPLIB_WITH_IPV6=ON',
          '-DUPNPLIB_WITH_BLOCKTCP=ON',
          '-DUPNPLIB_WITH_IXML=ON',
          '-DUPNPLIB_DEF_SAMPLES=ON -DUPNPLIB_DEF_DEVICE=ON',
          '-DUPNPLIB_DEF_SAMPLES=ON -DUPNPLIB_DEF_CLIENT=ON',
          '-DUPNPLIB_DEF_SAMPLES=ON -DUPNPLIB_DEF_COMBO=ON',
          '-DUPNPLIB_WITH_SAMPLES=ON',
          '-DUPNPLIB_WITH_TOOLS=ON -DUPNPLIB_WITH_CLIENT=ON -DUPNPLIB_WITH_DEVICE=ON -DUPNPLIB_WITH_WEBSERVER=ON -DUPNPLIB_WITH_SSDP=ON -DUPNPLIB_WITH_OPTSSDP=ON -DUPNPLIB_WITH_SOAP=ON -DUPNPLIB_WITH_GENA=ON -DUPNPLIB_WITH_IPV6=ON -DUPNPLIB_WITH_BLOCKTCP=ON -DUPNPLIB_WITH_IXML=ON -DUPNPLIB_WITH_SAMPLES=ON -DUPNPLIB_WITH_GOOGLETEST=ON -DGTESTS_WITH_SHARED_LIBS=ON' ]
      fail-fast: false

    steps:
      - uses: actions/checkout@v2

      - if: matrix.os == 'windows-latest'
        # need developer command prompt
        name: Use MS Windows 64 bit
        uses: ilammy/msvc-dev-cmd@v1
        with:
          arch: amd64

      - if: runner.os == 'Linux'
        name: Configure Linux
        run: >
          cmake
          -S .
          -B build
          -D CMAKE_C_COMPILER=gcc-10
          -D CMAKE_CXX_COMPILER=g++-10
          -D CMAKE_BUILD_TYPE=${{matrix.buildtype}} ${{matrix.option}}

      - if: runner.os == 'macOS'
        name: Configure macOS
        run: >
          cmake
          -S .
          -B build
          -D CMAKE_BUILD_TYPE=${{matrix.buildtype}} ${{matrix.option}}

      - if: runner.os == 'Windows'
        name: Configure Windows
        run: >
          cmake
          -S .
          -B build
          -D CMAKE_BUILD_TYPE=${{matrix.buildtype}} ${{matrix.option}}

      - name: Build
        run: cmake --build build --config ${{matrix.buildtype}}


  # Job: Check clang format
  # -----------------------
  clang:
    name: Check clang format
    needs: [ Build_with_Visual_Studio, Build_with_NMake ]
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v2
    - uses: DoozyX/clang-format-lint-action@v0.13
      with:
        source: './pupnp ./upnplib ./compa ./gtests ./sample ./umock ./ixml'
        extensions: 'cpp,hpp'
        clangFormatVersion: 11.1.0
