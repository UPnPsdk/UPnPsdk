name: Integration tests

on:
  push:
    branches: [ dev, main, workflow_dispatch ]
  pull_request:
    branches: [ dev, main, workflow_dispatch ]

jobs:
  # Job: Check clang format
  # -----------------------
  clang:
    name: Check clang format
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v2
    - uses: DoozyX/clang-format-lint-action@v0.13
      with:
        source: './pupnp ./core ./include ./gtests'
        extensions: 'cpp,hpp'
        clangFormatVersion: 11.1.0


  # Job: Run gtests
  #----------------
  run_gtests:
    name: Run gtests
    runs-on: ${{ matrix.os }}

    strategy:
      matrix:
        os: [ ubuntu-latest, macOS-latest, windows-latest ]
        shared: [ '', '-D GTESTS_WITH_SHARED_LIBS=ON' ]
      fail-fast: false

    steps:
    # Step building gtests
      - uses: actions/checkout@v2

      - if: matrix.os == 'windows-latest'
        # need developer command prompt
        name: Use MS Windows 64 bit
        uses: ilammy/msvc-dev-cmd@v1
        with:
          arch: amd64

      - if: runner.os == 'Linux'
        name: Configure Linux
        run: cmake -S . -B build -D CMAKE_C_COMPILER=gcc-10 -D CMAKE_CXX_COMPILER=g++-10 -D UPNPLIB_WITH_GOOGLETEST=ON ${{matrix.shared}} -D CMAKE_BUILD_TYPE=Debug

      - if: runner.os == 'macOS'
        name: Configure macOS
        #run: cmake -S . -B build -D CMAKE_C_COMPILER=$(brew --prefix llvm)/bin/clang -D CMAKE_CXX_COMPILER=$(brew --prefix llvm)/bin/clang++ -D UPNPLIB_WITH_GOOGLETEST=ON ${{matrix.shared}} -D CMAKE_BUILD_TYPE=Release
        run: cmake -S . -B build -D CMAKE_C_COMPILER=gcc-10 -D CMAKE_CXX_COMPILER=g++-10 -D UPNPLIB_WITH_GOOGLETEST=ON ${{matrix.shared}} -D CMAKE_BUILD_TYPE=Debug

      - if: runner.os == 'Windows'
        name: Configure Windows
        run: cmake -S . -B build -D UPNPLIB_WITH_GOOGLETEST=ON ${{matrix.shared}} -D CMAKE_BUILD_TYPE=Debug

      - name: Build
        run: cmake --build build --config Debug

      - if: runner.os != 'Windows'
        name: Run gtests not on MS Windows
        run: |
          cd ./build/gtests
          ctest --output-on-failure

      - if: runner.os == 'Windows'
        name: Run gtests on MS Windows
        run: |
          cd ./build/gtests
          ctest -C Debug --output-on-failure


  # Job: Configure and build Ubuntu
  #--------------------------------
  # ubuntu-18.04 isn't used for tests because it doesn't support open standard
  # ISO C++20 that we declared to use for UPnPlib.
  Build_Ubuntu:
    name: Build Ubuntu
    runs-on: ubuntu-latest

    strategy:
      matrix:
        googletest: [ '', '-D UPNPLIB_WITH_GOOGLETEST=ON' ]
        shared: [ '', '-D GTESTS_WITH_SHARED_LIBS=ON' ]
        buildtype: [ 'Release', 'Debug' ]
      fail-fast: false

    steps:
    # Step building the core upnplib
      - uses: actions/checkout@v2

      - name: Configure
        run: cmake -S . -B build -D CMAKE_C_COMPILER=gcc-10 -D CMAKE_CXX_COMPILER=g++-10 ${{matrix.googletest}} ${{matrix.shared}} -D CMAKE_BUILD_TYPE=${{matrix.buildtype}} -D UPNPLIB_WITH_TOOLS=YES

      - name: Build
        run: cmake --build build --config ${{matrix.buildtype}}

      - if: (matrix.googletest == '-D UPNPLIB_WITH_GOOGLETEST=ON') && (matrix.shared == '')
        name: Check gtest library files, static
        run: |
          ls ./build/lib/libgtest.a
          ls ./build/lib/libgmock.a
          ls ./build/lib/libgtest_main.a
          ls ./build/lib/libgmock_main.a

      - if: (matrix.googletest == '-D UPNPLIB_WITH_GOOGLETEST=ON') && (matrix.shared == '-D GTESTS_WITH_SHARED_LIBS=ON')
        name: Check gtest library files, shared
        run: |
          ls ./build/lib/libgtest.so
          ls ./build/lib/libgmock.so
          ls ./build/lib/libgtest_main.so
          ls ./build/lib/libgmock_main.so

      - if: matrix.googletest == '-D UPNPLIB_WITH_GOOGLETEST=ON'
        name: Run simple gtest
        # This gtests are always built with GoogleTest
        run: |
          set -e
          echo -e "\n./build/gtests/test_template"
          ./build/gtests/test_template
          echo -e "\n./build/gtests/test_simple-pnsh"
          ./build/gtests/test_simple-pnsh
          echo -e "\n./build/gtests/test_simple-pnst"
          ./build/gtests/test_simple-pnst
          echo -e "\n./build/gtests/test_simple-ucsh"
          ./build/gtests/test_simple-ucsh
          echo -e "\n./build/gtests/test_simple-ucst"
          ./build/gtests/test_simple-ucst
          echo -e "\n./build/gtests/test_simple-unsh"
          ./build/gtests/test_simple-unsh
          echo -e "\n./build/gtests/test_simple-unst"
          ./build/gtests/test_simple-unst

      - if: matrix.buildtype != 'Debug'
        name: Verify if NO Debug info
        # These two libraries are always built
        run: |
          objdump -g ./build/lib/libpupnp_native.so | grep --ignore-case --max-count=1 --invert-match "Contents of the .debug_info section"
          objdump -g ./build/lib/libupnplib_compa.so | grep --ignore-case --max-count=1 --invert-match "Contents of the .debug_info section"
          objdump -g ./build/lib/libupnplib_native.so | grep --ignore-case --max-count=1 --invert-match "Contents of the .debug_info section"
          ls ./build/lib/libpupnp_native.a
          ls ./build/lib/libupnplib_compa.a
          ls ./build/lib/libupnplib_native.a

      - if: matrix.buildtype == 'Debug'
        name: Verify if Debug info
        # These two libraries are always built
        run: |
          objdump -g ./build/lib/libpupnp_native.so | grep --ignore-case --max-count=1 "Contents of the .debug_info section"
          objdump -g ./build/lib/libupnplib_compa.so | grep --ignore-case --max-count=1 "Contents of the .debug_info section"
          objdump -g ./build/lib/libupnplib_native.so | grep --ignore-case --max-count=1 "Contents of the .debug_info section"
          ls ./build/lib/libpupnp_native.a
          ls ./build/lib/libupnplib_compa.a
          ls ./build/lib/libupnplib_native.a

      - name: Run upnplib info program
        # This program is always built
        run: ./build/bin/upnplibInfo_shared


  # Job: Configure and build MacOS
  #-------------------------------
  Build_MacOS:
    name: Build MacOS
    needs: run_gtests
    runs-on: ${{ matrix.os }}

    strategy:
      matrix:
        os: [ macOS-10.15, macOS-latest ]
        googletest: [ '', '-D UPNPLIB_WITH_GOOGLETEST=ON' ]
        shared: [ '', '-D GTESTS_WITH_SHARED_LIBS=ON' ]
        buildtype: [ 'Release', 'Debug' ]
      fail-fast: false

    steps:
    # Steps to build and test the core upnplib
      - uses: actions/checkout@v2

      - name: Configure
        run: cmake -S . -B build -D CMAKE_C_COMPILER=gcc-10 -D CMAKE_CXX_COMPILER=g++-10 ${{matrix.googletest}} ${{matrix.shared}} -D CMAKE_BUILD_TYPE=${{matrix.buildtype}} -D UPNPLIB_WITH_TOOLS=YES --log-level=DEBUG

      - name: Build
        run: cmake --build build --config ${{matrix.buildtype}}

      - if: (matrix.googletest == '-D UPNPLIB_WITH_GOOGLETEST=ON') && (matrix.shared == '')
        name: Check gtest library files, static
        run: |
          ls ./build/lib/libgtest.a
          ls ./build/lib/libgmock.a
          ls ./build/lib/libgtest_main.a
          ls ./build/lib/libgmock_main.a

      - if: (matrix.googletest == '-D UPNPLIB_WITH_GOOGLETEST=ON') && (matrix.shared == '-D GTESTS_WITH_SHARED_LIBS=ON')
        name: Check gtest library files, shared
        run: |
          ls ./build/lib/libgtest.dylib
          ls ./build/lib/libgmock.dylib
          ls ./build/lib/libgtest_main.dylib
          ls ./build/lib/libgmock_main.dylib

      - if: matrix.googletest == '-D UPNPLIB_WITH_GOOGLETEST=ON'
        name: Run simple gtest
        # These gtests are always built with GoogleTest
        run: |
          set -e
          echo -e "\n./build/gtests/test_template"
          ./build/gtests/test_template
          echo -e "\n./build/gtests/test_simple-pnsh"
          ./build/gtests/test_simple-pnsh
          echo -e "\n./build/gtests/test_simple-pnst"
          ./build/gtests/test_simple-pnst
          echo -e "\n./build/gtests/test_simple-ucsh"
          ./build/gtests/test_simple-ucsh
          echo -e "\n./build/gtests/test_simple-ucst"
          ./build/gtests/test_simple-ucst
          echo -e "\n./build/gtests/test_simple-unsh"
          ./build/gtests/test_simple-unsh
          echo -e "\n./build/gtests/test_simple-unst"
          ./build/gtests/test_simple-unst

      - if: matrix.buildtype != 'Debug'
        name: Verify if NO Debug info
        # These two libraries are always built
        run: |
          # objdump does not work (this way?) on macOS
          #objdump [-a] -g upnp/build/lib/libupnplib.dylib | grep --ignore-case --max-count=1 --invert-match "Contents of the .debug_info section"
          ls ./build/lib/libpupnp_native.dylib
          ls ./build/lib/libupnplib_compa.dylib
          ls ./build/lib/libupnplib_native.dylib
          ls ./build/lib/libpupnp_native.a
          ls ./build/lib/libupnplib_compa.a
          ls ./build/lib/libupnplib_native.a

      - if: matrix.buildtype == 'Debug'
        name: Verify if Debug info
        # These two libraries are always built
        run: |
          # objdump does not work (this way?) on macOS
          #objdump [-a] -g upnp/build/lib/libupnplib.dylib | grep --ignore-case --max-count=1 "Contents of the .debug_info section"
          ls ./build/lib/libpupnp_native.dylib
          ls ./build/lib/libupnplib_compa.dylib
          ls ./build/lib/libupnplib_native.dylib
          ls ./build/lib/libpupnp_native.a
          ls ./build/lib/libupnplib_compa.a
          ls ./build/lib/libupnplib_native.a

      - name: Run upnplib info program
        # This program is always built
        run: ./build/bin/upnplibInfo_shared


  # Job: Configure and build with Visual Studio
  #--------------------------------------------
  Build_with_Visual_Studio:
    name: Build with Visual Studio
    needs: run_gtests
    runs-on: ${{ matrix.os }}

    strategy:
      matrix:
        os: [ windows-2019, windows-2022 ]
        googletest: [ '', '-D UPNPLIB_WITH_GOOGLETEST=ON' ]
        shared: [ '', '-D GTESTS_WITH_SHARED_LIBS=ON' ]
        buildtype: [ 'Release', 'Debug' ]
      fail-fast: false

    steps:
    # Step building the core upnplib
      - uses: actions/checkout@v2

      - if: matrix.os == 'windows-2019'
        # need developer command prompt
        name: Use MS Windows 32 bit
        uses: ilammy/msvc-dev-cmd@v1
        with:
          arch: win32

      - if: matrix.os == 'windows-2022'
        # need developer command prompt
        name: Use MS Windows 64 bit
        uses: ilammy/msvc-dev-cmd@v1
        with:
          arch: amd64

      - if: matrix.os == 'windows-2019'
        name: Configure 32 bit
        run: cmake -S . -B build -A Win32 ${{matrix.googletest}} ${{matrix.shared}} -D CMAKE_BUILD_TYPE=${{matrix.buildtype}} -D UPNPLIB_WITH_TOOLS=YES

      - if: matrix.os == 'windows-2022'
        name: Configure 64 bit
        run: cmake -S . -B build ${{matrix.googletest}} ${{matrix.shared}} -D CMAKE_BUILD_TYPE=${{matrix.buildtype}} -D UPNPLIB_WITH_TOOLS=YES

      - name: Build
        run: cmake --build build --config ${{matrix.buildtype}}

      - if: (matrix.googletest == '-D UPNPLIB_WITH_GOOGLETEST=ON')
        name: GTest link libraries build with Visual Studio
        run: |
          ls ./build/lib/${{matrix.buildtype}}/gtest.lib
          ls ./build/lib/${{matrix.buildtype}}/gmock.lib
          ls ./build/lib/${{matrix.buildtype}}/gtest_main.lib
          ls ./build/lib/${{matrix.buildtype}}/gmock_main.lib

      - if: (matrix.googletest == '-D UPNPLIB_WITH_GOOGLETEST=ON') && (matrix.shared == '-D GTESTS_WITH_SHARED_LIBS=ON')
        name: GTest .dll libraries build with Visual Studio
        run: |
          ls ./build/bin/${{matrix.buildtype}}/gtest.dll
          ls ./build/bin/${{matrix.buildtype}}/gmock.dll
          ls ./build/bin/${{matrix.buildtype}}/gtest_main.dll
          ls ./build/bin/${{matrix.buildtype}}/gmock_main.dll
          ls $env:SYSTEMROOT/System32/gtest.dll
          ls $env:SYSTEMROOT/System32/gmock.dll
          ls $env:SYSTEMROOT/System32/gtest_main.dll
          ls $env:SYSTEMROOT/System32/gmock_main.dll

      - if: matrix.googletest == '-D UPNPLIB_WITH_GOOGLETEST=ON'
        name: Run simple gtest
        run: |
          $env:path += ";./build/bin/${{matrix.buildtype}}"
          echo "`n./build/gtests/${{matrix.buildtype}}/test_template.exe"
          ./build/gtests/${{matrix.buildtype}}/test_template.exe
          if(-not $?) {exit 1}
          echo "`n./build/gtests/${{matrix.buildtype}}/test_simple-pnsh.exe"
          ./build/gtests/${{matrix.buildtype}}/test_simple-pnsh.exe
          if(-not $?) {exit 1}
          echo "`n./build/gtests/${{matrix.buildtype}}/test_simple-pnst.exe"
          ./build/gtests/${{matrix.buildtype}}/test_simple-pnst.exe
          if(-not $?) {exit 1}
          echo "`n./build/gtests/${{matrix.buildtype}}/test_simple-ucsh.exe"
          ./build/gtests/${{matrix.buildtype}}/test_simple-ucsh.exe
          if(-not $?) {exit 1}
          echo "`n./build/gtests/${{matrix.buildtype}}/test_simple-ucst.exe"
          ./build/gtests/${{matrix.buildtype}}/test_simple-ucst.exe
          if(-not $?) {exit 1}
          echo "`n./build/gtests/${{matrix.buildtype}}/test_simple-unsh.exe"
          ./build/gtests/${{matrix.buildtype}}/test_simple-unsh.exe
          if(-not $?) {exit 1}
          echo "`n./build/gtests/${{matrix.buildtype}}/test_simple-unst.exe"
          ./build/gtests/${{matrix.buildtype}}/test_simple-unst.exe
          if(-not $?) {exit 1}

      - name: Run static test program
        run: ./build/bin/${{matrix.buildtype}}/upnplibInfo_static.exe

      - name: Run shared test program
        run: ./build/bin/${{matrix.buildtype}}/upnplibInfo_shared.exe


  # Job: Configure and build with NMake
  #------------------------------------
  Build_with_NMake:
    name: Build with NMake
    needs: run_gtests
    runs-on: ${{ matrix.os }}

    strategy:
      matrix:
        os: [ windows-2019, windows-2022 ]
        googletest: [ '', '-D UPNPLIB_WITH_GOOGLETEST=ON' ]
        shared: [ '', '-D GTESTS_WITH_SHARED_LIBS=ON' ]
        buildtype: [ 'Release', 'Debug' ]
      fail-fast: false

    steps:
    # Step building the core upnplib
      - uses: actions/checkout@v2

      - if: matrix.os == 'windows-2019'
        # need developer command prompt
        name: Use MS Windows 32 bit
        uses: ilammy/msvc-dev-cmd@v1
        with:
          arch: win32

      - if: matrix.os == 'windows-2022'
        # need developer command prompt
        name: Use MS Windows 64 bit
        uses: ilammy/msvc-dev-cmd@v1
        with:
          arch: amd64

      - name: Configure
        run: cmake -S . -B build -G "NMake Makefiles" ${{matrix.googletest}} ${{matrix.shared}} -D CMAKE_BUILD_TYPE=${{matrix.buildtype}} -D UPNPLIB_WITH_TOOLS=YES

      - name: Build
        run: cmake --build build --config ${{matrix.buildtype}}

      - if: (matrix.googletest == '-D UPNPLIB_WITH_GOOGLETEST=ON')
        name: GTest link libraries build with NMake
        run: |
          ls ./build/lib/gtest.lib
          ls ./build/lib/gmock.lib
          ls ./build/lib/gtest_main.lib
          ls ./build/lib/gmock_main.lib

      - if: (matrix.googletest == '-D UPNPLIB_WITH_GOOGLETEST=ON') && (matrix.shared == '-D GTESTS_WITH_SHARED_LIBS=ON')
        name: GTest .dll libraries build with NMake
        run: |
          ls ./build/bin/gtest.dll
          ls ./build/bin/gmock.dll
          ls ./build/bin/gtest_main.dll
          ls ./build/bin/gmock_main.dll
          ls $env:SYSTEMROOT/System32/gtest.dll
          ls $env:SYSTEMROOT/System32/gmock.dll
          ls $env:SYSTEMROOT/System32/gtest_main.dll
          ls $env:SYSTEMROOT/System32/gmock_main.dll

      - if: matrix.googletest == '-D UPNPLIB_WITH_GOOGLETEST=ON'
        name: Run simple gtest
        run: |
          $env:path += ";./build/bin"
          echo "`n./build/gtests/test_template.exe"
          ./build/gtests/test_template.exe
          if(-not $?) {exit 1}
          echo "`n./build/gtests/test_simple-pnsh.exe"
          ./build/gtests/test_simple-pnsh.exe
          if(-not $?) {exit 1}
          echo "`n./build/gtests/test_simple-pnst.exe"
          ./build/gtests/test_simple-pnst.exe
          if(-not $?) {exit 1}
          echo "`n./build/gtests/test_simple-ucsh.exe"
          ./build/gtests/test_simple-ucsh.exe
          if(-not $?) {exit 1}
          echo "`n./build/gtests/test_simple-ucst.exe"
          ./build/gtests/test_simple-ucst.exe
          if(-not $?) {exit 1}
          echo "`n./build/gtests/test_simple-unsh.exe"
          ./build/gtests/test_simple-unsh.exe
          if(-not $?) {exit 1}
          echo "`n./build/gtests/test_simple-unst.exe"
          ./build/gtests/test_simple-unst.exe
          if(-not $?) {exit 1}

      - name: Run static test program
        run: ./build/bin/upnplibInfo_static.exe

      - name: Run shared test program
        run: ./build/bin/upnplibInfo_shared.exe


  # Job: Run build tests
  # --------------------
  build_tests:
    name: "build tests"
    needs: Build_with_Visual_Studio
    runs-on: ${{ matrix.os }}

    strategy:
      matrix:
        os: [ ubuntu-latest, macOS-latest, windows-latest ]
        buildtype: [ 'Release', 'Debug' ]
        option: [ '',
          '-DUPNPLIB_WITH_TOOLS=ON',
          '-DUPNPLIB_WITH_CLIENT=ON',
          '-DUPNPLIB_WITH_DEVICE=ON',
          '-DUPNPLIB_WITH_WEBSERVER=ON',
          '-DUPNPLIB_WITH_SSDP=ON',
          '-DUPNPLIB_WITH_OPTSSDP=ON',
          '-DUPNPLIB_WITH_SOAP=ON',
          '-DUPNPLIB_WITH_GENA=ON',
          '-DUPNPLIB_WITH_IPV6=ON',
          '-DUPNPLIB_WITH_BLOCKTCP=ON',
          '-DUPNPLIB_WITH_IXML=ON',
          '-DUPNPLIB_DEF_SAMPLES=ON -DUPNPLIB_DEF_DEVICE=ON',
          '-DUPNPLIB_DEF_SAMPLES=ON -DUPNPLIB_DEF_CLIENT=ON',
          '-DUPNPLIB_DEF_SAMPLES=ON -DUPNPLIB_DEF_COMBO=ON',
          '-DUPNPLIB_WITH_SAMPLES=ON',
          '-DUPNPLIB_WITH_TOOLS=ON -DUPNPLIB_WITH_CLIENT=ON -DUPNPLIB_WITH_DEVICE=ON -DUPNPLIB_WITH_WEBSERVER=ON -DUPNPLIB_WITH_SSDP=ON -DUPNPLIB_WITH_OPTSSDP=ON -DUPNPLIB_WITH_SOAP=ON -DUPNPLIB_WITH_GENA=ON -DUPNPLIB_WITH_IPV6=ON -DUPNPLIB_WITH_BLOCKTCP=ON -DUPNPLIB_WITH_IXML=ON -DUPNPLIB_WITH_SAMPLES=ON -DUPNPLIB_WITH_GOOGLETEST=ON -DGTESTS_WITH_SHARED_LIBS=ON' ]
      fail-fast: false

    steps:
      - uses: actions/checkout@v2

      - if: matrix.os == 'windows-latest'
        # need developer command prompt
        name: Use MS Windows 64 bit
        uses: ilammy/msvc-dev-cmd@v1
        with:
          arch: amd64

      - if: runner.os == 'Linux'
        name: Configure Linux
        run: cmake -S . -B build -D CMAKE_C_COMPILER=gcc-10 -D CMAKE_CXX_COMPILER=g++-10 -D CMAKE_BUILD_TYPE=${{matrix.buildtype}} ${{matrix.option}}

      - if: runner.os == 'macOS'
        name: Configure macOS
        run: cmake -S . -B build -D CMAKE_C_COMPILER=gcc-10 -D CMAKE_CXX_COMPILER=g++-10 -D CMAKE_BUILD_TYPE=${{matrix.buildtype}} ${{matrix.option}}

      - if: runner.os == 'Windows'
        name: Configure Windows
        run: cmake -S . -B build -D CMAKE_BUILD_TYPE=${{matrix.buildtype}} ${{matrix.option}}

      - name: Build
        run: cmake --build build --config ${{matrix.buildtype}}
