name: Continues Integration
# ubuntu-18.04 isn't used for tests because it doesn't support open standard
# ISO C++20 that we declared to use for UPnPlib.

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  # Job: Run tests of the pthreads4w library
  #-----------------------------------------
  test-pthreads4w:
    name: Run tests of the pthreads4w library
    runs-on: ${{ matrix.os }}

    strategy:
      matrix:
        os: [ windows-2016, windows-latest ]
      fail-fast: false

    steps:
    # Step building the pthreads4w library
      - uses: actions/checkout@v2

      - if: matrix.os == 'windows-2016'
        name: Use MS Windows 32 bit
        uses: ilammy/msvc-dev-cmd@v1
        with:
          arch: win32

      - if: matrix.os == 'windows-latest'
        name: Use MS Windows 64 bit
        uses: ilammy/msvc-dev-cmd@v1
        with:
          arch: amd64

      - name: Configure pthreads4w library with tests
        run: cmake -S pthreads4w -B pthreads4w/build -D PT4W_RUN_TESTS=ON


  # Job: configure and build operating systems for default Release
  #---------------------------------------------------------------
  build-release:
    name: Release build ${{matrix.os}} ${{matrix.option}}
    runs-on: ${{matrix.os}}

    strategy:
      matrix:
        os: [ ubuntu-latest, macOS-latest, windows-2016, windows-latest ]
        option: [ '', '-D UPNP_GOOGLETEST=ON' ]
      fail-fast: false

    steps:
    # Step building the core upnplib
      - uses: actions/checkout@v2

      - if: matrix.os == 'windows-2016'
        name: Use MS Windows 32 bit
        uses: ilammy/msvc-dev-cmd@v1
        with:
          arch: win32

      - if: matrix.os == 'windows-latest'
        name: Use MS Windows 64 bit
        uses: ilammy/msvc-dev-cmd@v1
        with:
          arch: amd64

      - name: Configure core upnplib
        run: cmake -S . -B build ${{matrix.option}}
#          -D CMAKE_BUILD_TYPE=Release
#          -D UPNP_GOOGLETEST=ON
#          -D BUILD_TESTING=OFF
#          -D client=OFF
#          -D device=OFF
#          -D gena=OFF
#          -D ipv6=OFF
#          -D optssdp=OFF
#          -D samples=OFF
#          -D scriptsupport=OFF
#          -D soap=OFF
#          -D ssdp=OFF
#          -D tools=OFF

      - if: runner.os != 'Windows'
        name: Build core upnplib
        run: |
          cmake --build build
          echo "Check if build binary file does NOT contain debug info..."
          objdump -g upnp/build/lib/libupnplib.so | grep --invert-match --ignore-case --max-count=1 "Contents of the .debug_info section"
          ls upnp/build/lib/libupnplib.a
          echo "Done."
          echo "Running the small info program 'upnplib'"
          ./upnp/build/upnplib

      - if: runner.os == 'Windows'
        name: Build core upnplib on MS Windows
        run: |
          cmake --build build --config Release
          echo "Check if binary Release file is build..."
          dir -Name upnp\build\Release\upnplib.dll
          dir -Name upnp\build\Release\upnplib.exe
          dir -Name upnp\build\Release\upnplib.exp
          dir -Name upnp\build\Release\upnplib.lib
          dir -Name upnp\build\Release\upnplibStatic.exe
          dir -Name upnp\build\Release\upnplibStatic.lib
          echo "Running the small info program 'upnplib.exe'"
          .\upnp\build\Release\upnplib.exe

# TODO: For later debug checking we can use this:
# objdump -g upnp/build/static/libupnplib.a | grep --invert-match --ignore-case --max-count=1 "Contents of the .debug_info section"
